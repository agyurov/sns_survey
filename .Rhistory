q19inv = c(1,2,7,8,11,12)
df.list2$q19nona = invert.level(df.list2$q19nona,q19inv)
df.list2num = list()
df.list2num = df.list2[which(qlen!=1)]
df.list2num[names(df.list2num)[which(unlist(lapply(df.list2num,function(x)dim(x)[1])) == 0)]] = NULL
df.list2num = lapply(df.list2num,fact2num)
names(df.list2num) = paste0(names(df.list2num),"num")
list2env(df.list2num,envir = .GlobalEnv)
names(df2)
demo.dat = df2[,115:124]
names(demo.dat)
demo.dat2 = ordfactordf(demo.dat,ordered=F)
q19labels = c("B","A","T","A","B","A","B","T","B","T","A","T")
names(q19) = paste0(names(q19),"_",q19labels)
bucket()
bucket.classes(classes="data.frame")
# Add classes to bucket
bucket.classes = function(destination = .BucketEnv,classes,from=.GlobalEnv,...){
varz = ls(name=from)
# varz = varz[216:220]
for(i in 1:length(varz)){
tmp = eval(parse(text=varz[i]))
if(class(tmp) == "function"){
next
}
# got to search for classes in lists...
tmp = break.list(tmp)
if(class(tmp) != "list"){
tmp = list(tmp)
}
tmp.class = unlist(lapply(tmp,class))
for(j in 1:length(tmp)){
if(length(tmp) > 0 && !is.null(tmp) && tmp.class[[j]] %in% classes){
obj = tmp[[j]]
# ifelse(is.null(names(tmp)[j]),nameend <- "", nameend <- names(tmp)[j])
# assign(paste0(varz[i],"_",nameend),obj,envir = destination)
if(is.null(names(tmp)[j])){
assign(paste0(varz[i]),obj,envir = destination)
}
if(!is.null(names(tmp)[j])){
assign(paste0(varz[i],"_",names(tmp)[j]),obj,envir = destination)
}
}
}
}
}
bucket.classes(classes="data.frame")
bucket()
# main
cat("\014")
rm(list = ls())
# .pardefault = par()
wd = getwd()
data_file = "all_data.RData"
source("libraries.R")
source("Rfunctions/Rfunctions.R")
source("data_prep.R")
head(q19)
head(q19nona)
# main
cat("\014")
rm(list = ls())
# .pardefault = par()
wd = getwd()
data_file = "all_data.RData"
source("libraries.R")
source("Rfunctions/Rfunctions.R")
source("data_prep.R")
head(q19)
head(q19nona)
x = alpha(q19nonanum)
x
x$alpha.drop
q19fa
bucket(q19fa)
bucket()
q19fa = brute.force.fa(q9nonanum)
q19fa$`5factors`
factanal(q19nonanum,12)
factanal(q19nonanum,11)
factanal(q19nonanum,10)
factanal(q19nonanum,9)
factanal(q19nonanum,8)
factanal(q19nonanum,7)
dim(df0)
names(df0)
names(df1)
names(df2)
str(df2)
x = df2[,grepl("q19.",names(df2),fixed=T)]
dim(x)
str(x)
unique.data(x)
# main
cat("\014")
rm(list = ls())
# .pardefault = par()
wd = getwd()
data_file = "all_data.RData"
source("libraries.R")
source("Rfunctions/Rfunctions.R")
source("data_prep.R")
x = alpha(q19nonanum)
x$alpha.drop
x
x$total$raw_alpha
x$alpha.drop$raw_alpha
x$total$raw_alpha < x$alpha.drop$raw_alpha
x$alpha.drop$raw_alpha > x$tota$raw_alpha
rownames(x$alpha.drop$)
rownames(x$alpha.drop)
rownames(x$alpha.drop)[x$alpha.drop$raw_alpha > x$tota$raw_alpha]
alpha
?alpha
x = alpha(q19nonanum)
x
x$alpha.drop$raw_alpha > x$tota$raw_alpha
x$alpha.drop$raw_alpha[x$alpha.drop$raw_alpha > x$tota$raw_alpha]
whch = which.max(x$alpha.drop$raw_alpha)
whch
x$alpha.drop$raw_alpha[whch] > x$tota$raw_alpha
x = alpha(q19nonanum)
x
whch = which.max(x$alpha.drop$raw_alpha)
if(x$alpha.drop$raw_alpha[whch] > x$tota$raw_alpha){
y = x[,-whch]
}
fk = q19nonanum
fk = q19nonanum
x = alpha(fk)
whch = which.max(x$alpha.drop$raw_alpha)
if(x$alpha.drop$raw_alpha[whch] > x$tota$raw_alpha){
y = fk[,-whch]
}
names(y)
dim(y)
x$alpha.drop$raw_alpha[whch] > x$tota$raw_alpha
break.list
alpha.recursive = function(df){
x = alpha(df)
whch = which.max(x$alpha.drop$raw_alpha)
if(x$alpha.drop$raw_alpha[whch] > x$tota$raw_alpha){
alpha.recursive(fk[,-whch])
}
if(!x$alpha.drop$raw_alpha[whch] > x$tota$raw_alpha){
return(x)
}
}
x = alpha.recursive(q19nonanum)
df
dta = fk
x = alpha(dta)
whch = which.max(x$alpha.drop$raw_alpha)
x$alpha.drop$raw_alpha[whch] > x$total$raw_alpha
alpha.recursive(dta[,-whch])
alpha.recursive = function(dta){
x = alpha(dta)
whch = which.max(x$alpha.drop$raw_alpha)
if(x$alpha.drop$raw_alpha[whch] > x$total$raw_alpha){
x = alpha.recursive(dta[,-whch])
}
if(!x$alpha.drop$raw_alpha[whch] > x$total$raw_alpha){
return(x)
}
}
x = alpha.recursive(q19nonanum)
x = alpha(dta)
whch = which.max(x$alpha.drop$raw_alpha)
if(x$alpha.drop$raw_alpha[whch] > x$total$raw_alpha){
x = alpha.recursive(dta[,-whch])
}
x$alpha.drop$raw_alpha[whch]
x$total$raw_alpha
x$alpha.drop$raw_alpha[whch] > x$total$raw_alpha
!x$alpha.drop$raw_alpha[whch] > x$total$raw_alpha
alpha.recursive = function(dta){
x = alpha(dta)
whch = which.max(x$alpha.drop$raw_alpha)
if(x$alpha.drop$raw_alpha[whch] > x$total$raw_alpha){
x = alpha.recursive(dta[,-whch])
}
if(!x$alpha.drop$raw_alpha[whch] > x$total$raw_alpha){
return(x)
}
}
x = alpha(dta)
whch = which.max(x$alpha.drop$raw_alpha)
if(x$alpha.drop$raw_alpha[whch] > x$total$raw_alpha){
x = alpha.recursive(dta[,-whch])
}
whch
x$alpha.drop$raw_alpha[whch] > x$total$raw_alpha
alpha.recursive = function(dta){
x = alpha(dta)
whch = which.max(x$alpha.drop$raw_alpha)
if(x$alpha.drop$raw_alpha[whch] > x$total$raw_alpha){
x = alpha.recursive(dta[,-whch])
}
if(!x$alpha.drop$raw_alpha[whch] > x$total$raw_alpha){
return(x)
}
}
x = alpha.recursive(q19nonanum)
break.list
alpha.recursive = function(dta){
x = alpha(dta)
whch = which.max(x$alpha.drop$raw_alpha)
if(x$alpha.drop$raw_alpha[whch] > x$total$raw_alpha){
return(alpha.recursive(dta[,-whch]))
}
if(!x$alpha.drop$raw_alpha[whch] > x$total$raw_alpha){
return(dta)
}
}
x = alpha.recursive(q19nonanum)
dim(x)
dim(fk)
class(x)
y = alpha.recursive(q8nonanum)
names(q8)
names(y)
dim(q8nonanum)
dim(y)
q8alpha = alpha.recursive(q8nonanum)
dim(q8nonanum)
names(q8nonanum)
names(q8alpha)
q10alpha = alpha.recursive(q10nonanum)
names(q10nonanum)
names(q10alpha)
names(q10nonanum)[!names(q10nonanum) %in% names(q10alpha)]
names(q8nonanum)[!names(q8nonanum) %in% names(q10alpha)]
q8alpha = alpha.recursive(q8nonanum)
names(q8nonanum)[!names(q8nonanum) %in% names(q8alpha)]
q19alpha = alpha.recursive(q19nonanum)
names(q19nonanum)[!names(q19nonanum) %in% names(q19alpha)]
# q20 ----------------------------------------------------------------------
q20alpha = alpha.recursive(q20nonanum)
names(q20nonanum)[!names(q20nonanum) %in% names(q20alpha)]
q19alpha = alpha.recursive(q19nonanum)
names(q19nonanum)[!names(q19nonanum) %in% names(q19alpha)]
q9alpha = alpha.recursive(q9nonanum)
names(q9nonanum)[!names(q9nonanum) %in% names(q9alpha)]
names(q9nonanum)
names(q9alpha)
# Chronbach's Alpha
# q8 ----------------------------------------------------------------------
q8alpha = alpha.recursive(q8nonanum)
names(q8nonanum)[!names(q8nonanum) %in% names(q8alpha)]
# q19 ----------------------------------------------------------------------
q9alpha = alpha.recursive(q9nonanum)
names(q9nonanum)[!names(q9nonanum) %in% names(q9alpha)]
# q10 ----------------------------------------------------------------------
q10alpha = alpha.recursive(q10nonanum)
names(q10nonanum)[!names(q10nonanum) %in% names(q10alpha)]
# q19 ----------------------------------------------------------------------
q19alpha = alpha.recursive(q19nonanum)
names(q19nonanum)[!names(q19nonanum) %in% names(q19alpha)]
# q20 ----------------------------------------------------------------------
q20alpha = alpha.recursive(q20nonanum)
names(q20nonanum)[!names(q20nonanum) %in% names(q20alpha)]
# Chronebach's alpha recursive
alpha.recursive = function(dta){
x = alpha(dta)
whch = which.max(x$alpha.drop$raw_alpha)
if(x$alpha.drop$raw_alpha[whch] > x$total$raw_alpha){
print(paste0(x$alpha.drop$raw_alpha[whch]," vs ",x$total$raw_alpha))
return(alpha.recursive(dta[,-whch]))
}
if(!x$alpha.drop$raw_alpha[whch] > x$total$raw_alpha){
return(dta)
}
}
q19alpha = alpha.recursive(q19nonanum)
# Chronebach's alpha recursive
alpha.recursive = function(dta){
x = alpha(dta)
whch = which.max(x$alpha.drop$raw_alpha)
if(x$alpha.drop$raw_alpha[whch] > x$total$raw_alpha){
print(paste0(round(x$alpha.drop$raw_alpha[whch],3)," vs ",round(x$total$raw_alpha,3)))
return(alpha.recursive(dta[,-whch]))
}
if(!x$alpha.drop$raw_alpha[whch] > x$total$raw_alpha){
return(dta)
}
}
q19alpha = alpha.recursive(q19nonanum)
q8alpha2 = alpha(q8nonanum)
q8alpha2
plot(q8alpha2$alpha.drop$raw_alpha)
plot(q8alpha2$alpha.drop$raw_alpha,ylim=c(0,1))
barplot(q8alpha2$alpha.drop$raw_alpha,ylim=c(0,1))
plot(q8alpha2$alpha.drop$raw_alpha,ylim=c(0,1),type="l")
names(q9nonanum)[!names(q9nonanum) %in% names(q9alpha),ylab=expression(alpha)]
plot(q8alpha2$alpha.drop$raw_alpha,ylim=c(0,1),type="l",ylab=expression(alpha))
windows()
my.barplot(q8alpha2$alpha.drop$raw_alpha)
may.barplot
my.barplot
my.barplot.old(q8alpha2$alpha.drop$raw_alpha)
my.barplot(q8alpha2$alpha.drop$raw_alpha,namez = rownames(q8alpha2$alpha.drop))
q8alpha2 = alpha(q8nonanum)
my.barplot(q8alpha2$alpha.drop$raw_alpha,namez = rownames(q8alpha2$alpha.drop))
q9alpha = alpha.recursive(q9nonanum)
names(q9nonanum)[!names(q9nonanum) %in% names(q9alpha)]
q9alpha2 = alpha(q9nonanum)
my.barplot(q9alpha2$alpha.drop$raw_alpha,namez = rownames(q9alpha2$alpha.drop))
q10alpha = alpha.recursive(q10nonanum)
names(q10nonanum)[!names(q10nonanum) %in% names(q10alpha)]
q10alpha2 = alpha(q10nonanum)
my.barplot(q10alpha2$alpha.drop$raw_alpha,namez = rownames(q10alpha2$alpha.drop))
q19alpha = alpha.recursive(q19nonanum)
names(q19nonanum)[!names(q19nonanum) %in% names(q19alpha)]
q19alpha2 = alpha(q19nonanum)
my.barplot(q19alpha2$alpha.drop$raw_alpha,namez = rownames(q19alpha2$alpha.drop))
q20alpha = alpha.recursive(q20nonanum)
names(q20nonanum)[!names(q20nonanum) %in% names(q20alpha)]
q20alpha2 = alpha(q20nonanum)
my.barplot(q20alpha2$alpha.drop$raw_alpha,namez = rownames(q20alpha2$alpha.drop))
record()
my.barplot(q8alpha2$alpha.drop$raw_alpha,namez = rownames(q8alpha2$alpha.drop),main="Q8")
windows()
dev.list()
dev.cur
dev.cur()
dev.cur() = dev.list()["windows"]
dev.list("windows")
dev.list()["windows"]
?dev.list
dev.cur()
dev.list()
names(dev.list())
dev.new()
dev.set(4)
"windows" %in% names(dev.list())
which("windows" %in% names(dev.list()))
which(names(dev.list()) == "windows")
dev.win = function(x){
if("windows" %in% names(dev.list())){
dev.set(which(names(dev.list()) == "windows"))
}
}
dev.win = function(){
if("windows" %in% names(dev.list())){
dev.set(which(names(dev.list()) == "windows"))
}
}
# Set graphics device to windows
dev.win = function(){
if("windows" %in% names(dev.list())){
dev.set(which(names(dev.list()) == "windows"))
}
if(!"windows" %in% names(dev.list())){
windows()
}
}
dev.win()
dev.off()
dev.win()
record()
# Chronebach's alpha recursive
alpha.recursive = function(dta){
x = alpha(dta)
whch = which.max(x$alpha.drop$raw_alpha)
if(x$alpha.drop$raw_alpha[whch] > x$total$raw_alpha){
cat(paste0(round(x$alpha.drop$raw_alpha[whch],3)," vs ",round(x$total$raw_alpha,3),"\n"))
return(alpha.recursive(dta[,-whch]))
}
if(!x$alpha.drop$raw_alpha[whch] > x$total$raw_alpha){
return(dta)
}
}
dev.win()
dev.list()
dev.list("windows")
dev.list()["windows"]
# Set graphics device to windows
dev.win = function(){
if("windows" %in% names(dev.list())){
dev.set(dev.list()["windows"])
}
if(!"windows" %in% names(dev.list())){
windows()
}
}
dev.win()
# Chronebach's alpha recursive
alpha.recursive = function(dta){
x = alpha(dta)
whch = which.max(x$alpha.drop$raw_alpha)
if(x$alpha.drop$raw_alpha[whch] > x$total$raw_alpha){
cat(paste0(round(x$alpha.drop$raw_alpha[whch],3)," vs ",round(x$total$raw_alpha,3),"\n"))
return(alpha.recursive(dta[,-whch]))
}
if(!x$alpha.drop$raw_alpha[whch] > x$total$raw_alpha){
return(dta)
}
}
alpha.recursive(q8nonanum)
fk  = alpha.recursive(q8nonanum)
fk  = alpha.recursive(q20nonanum)
fk  = alpha.recursive(q19nonanum)
fk  = alpha.recursive(q10nonanum)
fk  = alpha.recursive(q9nonanum)
# Chronebach's alpha recursive
alpha.recursive = function(dta){
x = alpha(dta)
whch = which.max(x$alpha.drop$raw_alpha)
if(x$alpha.drop$raw_alpha[whch] > x$total$raw_alpha){
cat(paste0(rownames(x$alpha.drop)[whch],"\n"))
cat(paste0(round(x$alpha.drop$raw_alpha[whch],3)," vs ",round(x$total$raw_alpha,3),"\n"))
cat("--------------\n")
return(alpha.recursive(dta[,-whch]))
}
if(!x$alpha.drop$raw_alpha[whch] > x$total$raw_alpha){
return(dta)
}
}
fk  = alpha.recursive(q9nonanum)
my.barplot(q9alpha2$alpha.drop$raw_alpha,namez = rownames(q9alpha2$alpha.drop),main="Q9",ylab=expression(alpha))
dev.win()
my.barplot(q9alpha2$alpha.drop$raw_alpha,namez = rownames(q9alpha2$alpha.drop),main="Q9",ylab=expression(alpha))
?requrie
?require
# main
cat("\014")
rm(list = ls())
# .pardefault = par()
wd = getwd()
data_file = "all_data.RData"
source("libraries.R")
source("Rfunctions/Rfunctions.R")
source("data_prep.R")
source("chronbach.R")
# Chronebach's alpha recursive
alpha.recursive = function(dta){
x = alpha(dta)
whch = which.max(x$alpha.drop$raw_alpha)
if(x$alpha.drop$raw_alpha[whch] > x$total$raw_alpha){
print(paste0(rownames(x$alpha.drop)[whch]))
print(paste0(round(x$alpha.drop$raw_alpha[whch],3)," vs ",round(x$total$raw_alpha,3)))
print("--------------")
return(alpha.recursive(dta[,-whch]))
}
if(!x$alpha.drop$raw_alpha[whch] > x$total$raw_alpha){
return(dta)
}
}
q8alpha = alpha.recursive(q8nonanum)
q9alpha = alpha.recursive(q9nonanum)
require(knitr)
require(psych)
require(markdown)
require(xtable)
require(ordinal)
knitr::opts_chunk$set(echo = F, message=F, warning=F)
load(paste0(getwd(),"/all_data.Rdata"))
load(paste0(getwd(),"/bucket.Rdata"))
source("chronbach.R")
record()
# Chronebach's alpha recursive
alpha.recursive = function(dta){
x = alpha(dta)
whch = which.max(x$alpha.drop$raw_alpha)
if(x$alpha.drop$raw_alpha[whch] > x$total$raw_alpha){
print(paste0(rownames(x$alpha.drop)[whch]),": ",round(x$alpha.drop$raw_alpha[whch],3)," vs ",round(x$total$raw_alpha,3)))
print("--------------")
return(alpha.recursive(dta[,-whch]))
}
if(!x$alpha.drop$raw_alpha[whch] > x$total$raw_alpha){
return(dta)
}
}
# Chronebach's alpha recursive
alpha.recursive = function(dta){
x = alpha(dta)
whch = which.max(x$alpha.drop$raw_alpha)
if(x$alpha.drop$raw_alpha[whch] > x$total$raw_alpha){
print(paste0(rownames(x$alpha.drop)[whch]),": ",round(x$alpha.drop$raw_alpha[whch],3)," vs ",round(x$total$raw_alpha,3)))
print("--------------")
return(alpha.recursive(dta[,-whch]))
}
if(!x$alpha.drop$raw_alpha[whch] > x$total$raw_alpha){
return(dta)
}
}
# Gymnasium 2 func
record()
q8alpha = alpha.recursive(q8nonanum)
q9alpha = alpha.recursive(q9nonanum)
# Chronebach's alpha recursive
alpha.recursive = function(dta){
x = alpha(dta)
whch = which.max(x$alpha.drop$raw_alpha)
if(x$alpha.drop$raw_alpha[whch] > x$total$raw_alpha){
print(paste0(rownames(x$alpha.drop)[whch],": ",
round(x$alpha.drop$raw_alpha[whch],3)," vs ",
round(x$total$raw_alpha,3)))
print("--------------")
return(alpha.recursive(dta[,-whch]))
}
if(!x$alpha.drop$raw_alpha[whch] > x$total$raw_alpha){
return(dta)
}
}
record()
record()
q9alpha = alpha.recursive(q9nonanum)
sqrt(1)
sqrt(1+1)
sqrt(1+1+1)
sqrt(1+1+1+1)
