plot.matrix(round(x),bty="n",col="white",yaxt="n",xaxt="n")
xseq = seq(0,1,len=ncol(x))
xseq = rep(xseq,each=nrow(x))
yseq = seq(0,1,len=nrow(x))
yseq = rep(yseq,ncol(x))
abline(v = (unique(xseq) - 1/(ncol(x)*2))[-1],col="grey",lty=lty)
abline(h = (unique(yseq) - 1/(nrow(x)*2))[-1],col="grey",lty=lty)
if(!is.null(cutoff)){
x[x<cutoff] = 0
}
if(!is.null(scale)){
cex = cex * x/max(x)
}
posx = par("usr")[1] - par("usr")[2]*.1
posy = par("usr")[3] - par("usr")[4]*.1
text(xseq,rev(yseq),labels = round(x,rnd),xpd=NA,cex=cex)
text(unique(xseq),rep(posx,ncol(x)),labels = colnames(x),xpd=NA,srt=srt,...)
text(rep(posy,nrow(x)),unique(yseq),labels = rownames(x),xpd=NA,srt=srt,...)
}
plot.matrix2(q8fa3$loadings)
rep(posy,nrow(x))
rep(posy,nrow(x))
posy
par("usr")
# plot the actual matrix
plot.matrix2 = function(x,rnd=3,srt=45,lty=2,cutoff=NULL,cex=1,scale=NULL,...){
plot.matrix(round(x),bty="n",col="white",yaxt="n",xaxt="n")
xseq = seq(0,1,len=ncol(x))
xseq = rep(xseq,each=nrow(x))
yseq = seq(0,1,len=nrow(x))
yseq = rep(yseq,ncol(x))
abline(v = (unique(xseq) - 1/(ncol(x)*2))[-1],col="grey",lty=lty)
abline(h = (unique(yseq) - 1/(nrow(x)*2))[-1],col="grey",lty=lty)
if(!is.null(cutoff)){
x[x<cutoff] = 0
}
if(!is.null(scale)){
cex = cex * x/max(x)
}
lx = par("usr")[2] - par("usr")[1]
ly = par("usr")[4] - par("usr")[3]
posx = par("usr")[1] - lx*.1
posy = par("usr")[3] - ly*.1
text(xseq,rev(yseq),labels = round(x,rnd),xpd=NA,cex=cex)
text(unique(xseq),rep(posx,ncol(x)),labels = colnames(x),xpd=NA,srt=srt,...)
text(rep(posy,nrow(x)),unique(yseq),labels = rownames(x),xpd=NA,srt=srt,...)
}
plot.matrix2(q8fa3$loadings)
lx = par("usr")[2] - par("usr")[1]
ly = par("usr")[4] - par("usr")[3]
posx = par("usr")[1] - lx*.1
posy = par("usr")[3] - ly*.1
par("usr")[1]
lx
par("usr")[1] - lx*.1
par("usr")
par("usr")[3] - ly*.1
lx
ly
posx
par("usr")[1] - lx*.1
# plot the actual matrix
plot.matrix2 = function(x,rnd=3,srt=45,lty=2,cutoff=NULL,cex=1,scale=NULL,...){
plot.matrix(round(x),bty="n",col="white",yaxt="n",xaxt="n")
xseq = seq(0,1,len=ncol(x))
xseq = rep(xseq,each=nrow(x))
yseq = seq(0,1,len=nrow(x))
yseq = rep(yseq,ncol(x))
abline(v = (unique(xseq) - 1/(ncol(x)*2))[-1],col="grey",lty=lty)
abline(h = (unique(yseq) - 1/(nrow(x)*2))[-1],col="grey",lty=lty)
if(!is.null(cutoff)){
x[x<cutoff] = 0
}
if(!is.null(scale)){
cex = cex * x/max(x)
}
lx = par("usr")[2] - par("usr")[1]
ly = par("usr")[4] - par("usr")[3]
posx = par("usr")[1] - lx*.05
posy = par("usr")[3] - ly*.05
text(xseq,rev(yseq),labels = round(x,rnd),xpd=NA,cex=cex)
text(unique(xseq),rep(posx,ncol(x)),labels = colnames(x),xpd=NA,srt=srt,...)
text(rep(posy,nrow(x)),unique(yseq),labels = rownames(x),xpd=NA,srt=srt,...)
}
plot.matrix2(q8fa3$loadings)
par("usr")
lx = par("usr")[2] - par("usr")[1]
ly = par("usr")[4] - par("usr")[3]
posx = par("usr")[1] - lx*.05
posy = par("usr")[3] - ly*.05
posx
# plot the actual matrix
plot.matrix2 = function(x,rnd=3,srt=45,lty=2,cutoff=NULL,cex=1,scale=NULL,...){
plot.matrix(round(x),bty="n",col="white",yaxt="n",xaxt="n")
xseq = seq(0,1,len=ncol(x))
xseq = rep(xseq,each=nrow(x))
yseq = seq(0,1,len=nrow(x))
yseq = rep(yseq,ncol(x))
abline(v = (unique(xseq) - 1/(ncol(x)*2))[-1],col="grey",lty=lty)
abline(h = (unique(yseq) - 1/(nrow(x)*2))[-1],col="grey",lty=lty)
if(!is.null(cutoff)){
x[x<cutoff] = 0
}
if(!is.null(scale)){
cex = cex * x/max(x)
}
lx = par("usr")[2] - par("usr")[1]
ly = par("usr")[4] - par("usr")[3]
posx = par("usr")[1] - lx*.01
posy = par("usr")[3] - ly*.05
text(xseq,rev(yseq),labels = round(x,rnd),xpd=NA,cex=cex)
text(unique(xseq),rep(posx,ncol(x)),labels = colnames(x),xpd=NA,srt=srt,...)
text(rep(posy,nrow(x)),unique(yseq),labels = rownames(x),xpd=NA,srt=srt,...)
}
plot.matrix2(q8fa3$loadings)
# plot the actual matrix
plot.matrix2 = function(x,rnd=3,srt=45,lty=2,cutoff=NULL,cex=1,scale=NULL,...){
plot.matrix(round(x),bty="n",col="white",yaxt="n",xaxt="n")
xseq = seq(0,1,len=ncol(x))
xseq = rep(xseq,each=nrow(x))
yseq = seq(0,1,len=nrow(x))
yseq = rep(yseq,ncol(x))
abline(v = (unique(xseq) - 1/(ncol(x)*2))[-1],col="grey",lty=lty)
abline(h = (unique(yseq) - 1/(nrow(x)*2))[-1],col="grey",lty=lty)
if(!is.null(cutoff)){
x[x<cutoff] = 0
}
if(!is.null(scale)){
cex = cex * x/max(x)
}
lx = par("usr")[2] - par("usr")[1]
ly = par("usr")[4] - par("usr")[3]
posx = par("usr")[1] - lx*0
posy = par("usr")[3] - ly*.05
text(xseq,rev(yseq),labels = round(x,rnd),xpd=NA,cex=cex)
text(unique(xseq),rep(posx,ncol(x)),labels = colnames(x),xpd=NA,srt=srt,...)
text(rep(posy,nrow(x)),unique(yseq),labels = rownames(x),xpd=NA,srt=srt,...)
}
plot.matrix2(q8fa3$loadings)
# plot the actual matrix
plot.matrix2 = function(x,rnd=3,srt=45,lty=2,cutoff=NULL,cex=1,scale=NULL,...){
plot.matrix(round(x),bty="n",col="white",yaxt="n",xaxt="n")
xseq = seq(0,1,len=ncol(x))
xseq = rep(xseq,each=nrow(x))
yseq = seq(0,1,len=nrow(x))
yseq = rep(yseq,ncol(x))
abline(v = (unique(xseq) - 1/(ncol(x)*2))[-1],col="grey",lty=lty)
abline(h = (unique(yseq) - 1/(nrow(x)*2))[-1],col="grey",lty=lty)
if(!is.null(cutoff)){
x[x<cutoff] = 0
}
if(!is.null(scale)){
cex = cex * x/max(x)
}
lx = par("usr")[2] - par("usr")[1]
ly = par("usr")[4] - par("usr")[3]
posx = par("usr")[1] - lx*1.1
posy = par("usr")[3] - ly*.05
text(xseq,rev(yseq),labels = round(x,rnd),xpd=NA,cex=cex)
text(unique(xseq),rep(posx,ncol(x)),labels = colnames(x),xpd=NA,srt=srt,...)
text(rep(posy,nrow(x)),unique(yseq),labels = rownames(x),xpd=NA,srt=srt,...)
}
plot.matrix2(q8fa3$loadings)
# plot the actual matrix
plot.matrix2 = function(x,rnd=3,srt=45,lty=2,cutoff=NULL,cex=1,scale=NULL,...){
plot.matrix(round(x),bty="n",col="white",yaxt="n",xaxt="n")
xseq = seq(0,1,len=ncol(x))
xseq = rep(xseq,each=nrow(x))
yseq = seq(0,1,len=nrow(x))
yseq = rep(yseq,ncol(x))
abline(v = (unique(xseq) - 1/(ncol(x)*2))[-1],col="grey",lty=lty)
abline(h = (unique(yseq) - 1/(nrow(x)*2))[-1],col="grey",lty=lty)
if(!is.null(cutoff)){
x[x<cutoff] = 0
}
if(!is.null(scale)){
cex = cex * x/max(x)
}
lx = par("usr")[2] - par("usr")[1]
ly = par("usr")[4] - par("usr")[3]
posx = par("usr")[1] - lx*0
posy = par("usr")[3] - ly*.05
text(xseq,rev(yseq),labels = round(x,rnd),xpd=NA,cex=cex)
text(unique(xseq),rep(posx,ncol(x)),labels = colnames(x),xpd=NA,srt=srt,...)
text(rep(posy,nrow(x)),unique(yseq),labels = rownames(x),xpd=NA,srt=srt,...)
}
plot.matrix2(q8fa3$loadings)
unique(xseq)
lx = par("usr")[2] - par("usr")[1]
ly = par("usr")[4] - par("usr")[3]
posx = par("usr")[1] - lx*0
posy = par("usr")[3] - ly*.05
posx
par("usr")
# plot the actual matrix
plot.matrix2 = function(x,rnd=3,srt=45,lty=2,cutoff=NULL,cex=1,scale=NULL,...){
plot.matrix(round(x),bty="n",col="white",yaxt="n",xaxt="n")
xseq = seq(0,1,len=ncol(x))
xseq = rep(xseq,each=nrow(x))
yseq = seq(0,1,len=nrow(x))
yseq = rep(yseq,ncol(x))
abline(v = (unique(xseq) - 1/(ncol(x)*2))[-1],col="grey",lty=lty)
abline(h = (unique(yseq) - 1/(nrow(x)*2))[-1],col="grey",lty=lty)
if(!is.null(cutoff)){
x[x<cutoff] = 0
}
if(!is.null(scale)){
cex = cex * x/max(x)
}
lx = par("usr")[2] - par("usr")[1]
ly = par("usr")[4] - par("usr")[3]
posx = par("usr")[1] - lx*.05
posy = par("usr")[3] - ly*.05
text(xseq,rev(yseq),labels = round(x,rnd),xpd=NA,cex=cex)
text(unique(xseq),rep(posy,ncol(x)),labels = colnames(x),xpd=NA,srt=srt,...)
text(rep(posx,nrow(x)),unique(yseq),labels = rownames(x),xpd=NA,srt=srt,...)
}
plot.matrix2(q8fa3$loadings)
# plot the actual matrix
plot.matrix2 = function(x,rnd=3,srt=45,lty=2,cutoff=NULL,cex=1,scale=NULL,...){
plot.matrix(round(x),bty="n",col="white",yaxt="n",xaxt="n")
xseq = seq(0,1,len=ncol(x))
xseq = rep(xseq,each=nrow(x))
yseq = seq(0,1,len=nrow(x))
yseq = rep(yseq,ncol(x))
abline(v = (unique(xseq) - 1/(ncol(x)*2))[-1],col="grey",lty=lty)
abline(h = (unique(yseq) - 1/(nrow(x)*2))[-1],col="grey",lty=lty)
if(!is.null(cutoff)){
x[x<cutoff] = 0
}
if(!is.null(scale)){
cex = cex * x/max(x)
}
lx = par("usr")[2] - par("usr")[1]
ly = par("usr")[4] - par("usr")[3]
posx = par("usr")[1] - lx*.1
posy = par("usr")[3] - ly*.1
text(xseq,rev(yseq),labels = round(x,rnd),xpd=NA,cex=cex)
text(unique(xseq),rep(posy,ncol(x)),labels = colnames(x),xpd=NA,srt=srt,...)
text(rep(posx,nrow(x)),unique(yseq),labels = rownames(x),xpd=NA,srt=srt,...)
}
plot.matrix2(q8fa3$loadings)
# plot the actual matrix
plot.matrix2 = function(x,rnd=3,srt=45,lty=2,cutoff=NULL,cex=1,scale=NULL,...){
plot.matrix(round(x),bty="n",col="white",yaxt="n",xaxt="n")
xseq = seq(0,1,len=ncol(x))
xseq = rep(xseq,each=nrow(x))
yseq = seq(0,1,len=nrow(x))
yseq = rep(yseq,ncol(x))
abline(v = (unique(xseq) - 1/(ncol(x)*2))[-1],col="grey",lty=lty)
abline(h = (unique(yseq) - 1/(nrow(x)*2))[-1],col="grey",lty=lty)
if(!is.null(cutoff)){
x[x<cutoff] = 0
}
if(!is.null(scale)){
cex = cex * x/max(x)
}
lx = par("usr")[2] - par("usr")[1]
ly = par("usr")[4] - par("usr")[3]
posx = par("usr")[1] - lx*.03
posy = par("usr")[3] - ly*.03
text(xseq,rev(yseq),labels = round(x,rnd),xpd=NA,cex=cex)
text(unique(xseq),rep(posy,ncol(x)),labels = colnames(x),xpd=NA,srt=srt,...)
text(rep(posx,nrow(x)),unique(yseq),labels = rownames(x),xpd=NA,srt=srt,...)
}
plot.matrix2(q8fa3$loadings)
# plot the actual matrix
plot.matrix2 = function(x,rnd=3,srt=45,lty=2,cutoff=NULL,cex=1,scale=NULL,scale.lab=.3,...){
plot.matrix(round(x),bty="n",col="white",yaxt="n",xaxt="n")
xseq = seq(0,1,len=ncol(x))
xseq = rep(xseq,each=nrow(x))
yseq = seq(0,1,len=nrow(x))
yseq = rep(yseq,ncol(x))
abline(v = (unique(xseq) - 1/(ncol(x)*2))[-1],col="grey",lty=lty)
abline(h = (unique(yseq) - 1/(nrow(x)*2))[-1],col="grey",lty=lty)
if(!is.null(cutoff)){
x[x<cutoff] = 0
}
if(!is.null(scale)){
cex = cex * x/max(x)
}
lx = par("usr")[2] - par("usr")[1]
ly = par("usr")[4] - par("usr")[3]
posx = par("usr")[1] - lx*scale.lab
posy = par("usr")[3] - ly*scale.lab
text(xseq,rev(yseq),labels = round(x,rnd),xpd=NA,cex=cex)
text(unique(xseq),rep(posy,ncol(x)),labels = colnames(x),xpd=NA,srt=srt,...)
text(rep(posx,nrow(x)),unique(yseq),labels = rownames(x),xpd=NA,srt=srt,...)
}
plot.matrix2(q8fa3$loadings)
plot.matrix2(q8fa3$loadings)
# plot the actual matrix
plot.matrix2 = function(x,rnd=3,srt=45,lty=2,cutoff=NULL,cex=1,scale=NULL,scale.lab=.03,...){
plot.matrix(round(x),bty="n",col="white",yaxt="n",xaxt="n")
xseq = seq(0,1,len=ncol(x))
xseq = rep(xseq,each=nrow(x))
yseq = seq(0,1,len=nrow(x))
yseq = rep(yseq,ncol(x))
abline(v = (unique(xseq) - 1/(ncol(x)*2))[-1],col="grey",lty=lty)
abline(h = (unique(yseq) - 1/(nrow(x)*2))[-1],col="grey",lty=lty)
if(!is.null(cutoff)){
x[x<cutoff] = 0
}
if(!is.null(scale)){
cex = cex * x/max(x)
}
lx = par("usr")[2] - par("usr")[1]
ly = par("usr")[4] - par("usr")[3]
posx = par("usr")[1] - lx*scale.lab
posy = par("usr")[3] - ly*scale.lab
text(xseq,rev(yseq),labels = round(x,rnd),xpd=NA,cex=cex)
text(unique(xseq),rep(posy,ncol(x)),labels = colnames(x),xpd=NA,srt=srt,...)
text(rep(posx,nrow(x)),unique(yseq),labels = rownames(x),xpd=NA,srt=srt,...)
}
plot.matrix2(q8fa3$loadings)
plot.matrix2(q8fa3$loadings,scaling=T)
plot.matrix2(q8fa3$loadings,scaling=.2)
plot.matrix2(q8fa3$loadings,scal3)
plot.matrix2(q8fa3$loadings,scale)
plot.matrix2(q8fa3$loadings,scale=2)
plot.matrix2(q8fa3$loadings,scale=5)
plot.matrix2(q8fa3$loadings,scale=T)
# plot the actual matrix
plot.matrix2 = function(x,rnd=3,srt=45,lty=2,cutoff=NULL,cex=1,scale=F,scale.lab=.03,...){
plot.matrix(round(x),bty="n",col="white",yaxt="n",xaxt="n")
xseq = seq(0,1,len=ncol(x))
xseq = rep(xseq,each=nrow(x))
yseq = seq(0,1,len=nrow(x))
yseq = rep(yseq,ncol(x))
abline(v = (unique(xseq) - 1/(ncol(x)*2))[-1],col="grey",lty=lty)
abline(h = (unique(yseq) - 1/(nrow(x)*2))[-1],col="grey",lty=lty)
if(!is.null(cutoff)){
x[x<cutoff] = 0
}
if(scale){
cex = cex * x/max(x)
}
lx = par("usr")[2] - par("usr")[1]
ly = par("usr")[4] - par("usr")[3]
posx = par("usr")[1] - lx*scale.lab
posy = par("usr")[3] - ly*scale.lab
text(xseq,rev(yseq),labels = round(x,rnd),xpd=NA,cex=cex)
text(unique(xseq),rep(posy,ncol(x)),labels = colnames(x),xpd=NA,srt=srt,...)
text(rep(posx,nrow(x)),unique(yseq),labels = rownames(x),xpd=NA,srt=srt,...)
}
plot.matrix2(q8fa3$loadings,scale=T)
plot.matrix2(q8fa3$loadings,scale=T,cex=2)
install.packages(psych)
install.packages("psych")
library(psych)
?alpha
alpha(q8)
alpha(q8nonanum)
n = 50
a = rpois(n,10)
a
a = runif(n,1,7)
a
c = runif(n,1,7)
n = 50
a = runif(n,1,7)
b = a + rnorm(n)
c = runif(n,1,7)
cor(a,b,c)
cor(cbind(a,b,c))
# chronbach's
set.seed(123)
n = 50
a = runif(n,1,7)
b = a + rnorm(n)
c = runif(n,1,7)
cor(cbind(a,b,c))
dat = round(cbind(a,b,c))
cor(dat)
dat
alpha(dat)
x = rowsum(dat)
x = rowSums(dat)
x
alpha
apply(dat,2,sd)
apply(dat,1,sd)
apply(dat,2,sd)
sd(a)
sd(round(a))
calpha = 3/2*(1 - sum(apply(dat,2,var)/var(x))
calpha = 3/2*(1 - sum(apply(dat,2,var)/var(x)))
calpha
alpha(dat)
ps = alpha(dat)
ps$total$raw_alpha
calpha
ps$total$std.alpha
x2 = rowSums(cor(data))
x2 = rowSums(cor(dat))
calpha2 = 3/2*(1 - sum(apply(dat,2,var)/var(x2)))
calpha2
calpha2 = 3/2*(1 - sum(apply(cor(dat),2,var)/var(x2)))
calpha2
mat
upper.tri(mat)
mat[upper.tri(mat)]
cor(dat)[upper.tri(cor(dat))]
mean(cor(dat)[upper.tri(cor(dat))])
K = mean(cor(dat)[upper.tri(cor(dat))])
r = mean(cor(dat)[upper.tri(cor(dat))])
3*r/(1+2*r)
ps$total$std.alpha
ps
r
x
cor(a,x)
calpha
cor(x,b)
cor(x,c)
ps
cor(x,a)
cor(x,b)
cor(x,c)
sd(x)
sd(a)
sd(round(a))
mean(round(a))
mean(round(b))
mean(round(c))
cor(x,round(a))
cor(x,round(b))
cor(x,round(c))
# chronbach's
set.seed(124)
n = 50
a = runif(n,1,7)
b = a + rnorm(n)
c = runif(n,1,7)
dat = round(cbind(a,b,c))
cor(dat)
alpha(dat)
# # manually
# # raw alpha
# x = rowSums(dat)
# calpha = 3/2*(1 - sum(apply(dat,2,var)/var(x)))
# calpha
#
# # std. alpha
#
# r = mean(cor(dat)[upper.tri(cor(dat))])
#
# 3*r/(1+2*r)
# chronbach's
set.seed(125)
n = 50
a = runif(n,1,7)
b = a + rnorm(n)
c = runif(n,1,7)
dat = round(cbind(a,b,c))
# # manually
# # raw alpha
# x = rowSums(dat)
# calpha = 3/2*(1 - sum(apply(dat,2,var)/var(x)))
# calpha
#
# # std. alpha
#
# r = mean(cor(dat)[upper.tri(cor(dat))])
#
# 3*r/(1+2*r)
cor(dat)
alpha(dat)
c
round(c)
# chronbach's
set.seed(125)
n = 50
a = round(runif(n,1,7))
b = round(a + rnorm(n))
c = round(runif(n,1,7))
dat = round(cbind(a,b,c))
# # manually
# # raw alpha
# x = rowSums(dat)
# calpha = 3/2*(1 - sum(apply(dat,2,var)/var(x)))
# calpha
#
# # std. alpha
#
# r = mean(cor(dat)[upper.tri(cor(dat))])
#
# 3*r/(1+2*r)
cor(dat)
alpha(dat)
cor(a,b)
cor(a,c)
sum(a==b)
sum(a==c)
# main
rm(list = ls())
# .pardefault = par()
wd = getwd()
data_file = "all_data.RData"
source("libraries.R")
source("functions.R")
source("data_prep.R")
source("analysis_q8.R")
source("analysis_q10.R")
source("analysis_q19.R")
source("analysis_q20.R")
source("analysis.R")
source("analysis_alt.R")
# record()
# save.image(paste0(getwd(),"/","all_data.RData"))
# save.image(paste0(getwd(),"/bucket.RData"))
# browseURL(paste('file://', file.path(getwd(),'notes.html'), sep=''))
