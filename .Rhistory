return(invisible(NULL))
}
if(all(out)){
cat(paste0("Returning ",paste0(arg[out],collapse = ", "),".\n"))
# new ---
for(i in 1:length(out)){
assign(arg[out[i]],as.list(env)[arg[out[i]]],envir = .GlobalEnv)
}
# end new ---
return(as.list(env)[arg[out]])
}
}
# -----------------------------------------
# Add to bucket
if(add & !rmv){
# Overwriting
if(any(out)){
for(i in arg[out]){
ans = readline(paste0(i," already exist in bucket. Overwrrite? y/n: \n"))
if(ans == "y"){
assign(i,eval(parse(text = i)),envir = env)
cat(paste0(i," added to the bucket!\n"))
}
if(ans == "n"){}
if(!ans %in% c("y","n")){
warning("Exitted function - answer me! ")
}
}
}
# Not overwriting, just adding
for(i in arg[!out]){
if(exists(i,envir = .GlobalEnv)){
assign(i,eval(parse(text = i)),envir = env)
cat(paste0(i," added to the bucket!\n"))
}
if(!exists(i,envir = .GlobalEnv)){
cat(paste0("Object ",i," does not exist!\n"))
}
}
}
# Remove items from bucket
if(rmv){
for(i in arg){
if(!all(out)){
cat(paste0(paste0(arg[!out],collapse=", ")," not in the bucket. \n"))
}
if(all(out)){
ans = readline(paste0("Are you sure you want to remove ",i," from the bucket. y/n: "))
if(ans == "y"){
rm(list=i,envir = env)
}
}
}
}
# save(list=ls(envir = .BucketEnv),file=paste0(getwd(),"/",filef),envir = env)
with(env,save.image(paste0(getwd(),"/",filef)))
}
ok = bucket()
zz2 = ok$zz2
zz = ok$zz
class(zz2)
zz2
unlist(zz2)
zz
data.frame(unlist(zz2),zz)
print(data.frame(unlist(zz2),zz))
bucket = function(...,add = F,env = .BucketEnv,short=T,rmv=F,filef = "bucket.RData"){
# Exit if add=F and empty bucket
if(!add & length(as.list(env))==0 & !rmv){
cat("Empty bucket, nothing to find here.\n")
return(invisible(NULL))
}
# display items if add=F and !empty bucket
if(!add & length(as.list(env))!=0 & length(as.character(as.list(substitute(list(...)))[-1]))==0 & !rmv){
cat("In storage: \n")
if(short){
zz = ls(envir = env)
zz2 = lapply(as.list(env),class)
names(zz2) = NULL
# cat(paste0(zz2,", ",zz,"\n"))
data.frame(unlist(zz2),zz)
return(data.frame(unlist(zz2),zz))
# return(invisible(data.frame(class=unlist(zz2)),name=zz)))
}
if(!short){
print(as.list(env))
}
return(invisible(NULL))
}
arg = as.character(as.list(substitute(list(...)))[-1])
# Check for existence
out = arg %in% ls(env)
print("OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOUT")
print(arg)
# -----------------------------------------
# Return from bucket
if(!add & !rmv){
if(!all(out)){
cat(paste0(paste0(arg[!out],collapse=", ")," not in the bucket. \n"))
return(invisible(NULL))
}
if(all(out)){
cat(paste0("Returning ",paste0(arg[out],collapse = ", "),".\n"))
# new ---
for(i in 1:length(out)){
assign(arg[out[i]],as.list(env)[arg[out[i]]],envir = .GlobalEnv)
}
# end new ---
return(as.list(env)[arg[out]])
}
}
# -----------------------------------------
# Add to bucket
if(add & !rmv){
# Overwriting
if(any(out)){
for(i in arg[out]){
ans = readline(paste0(i," already exist in bucket. Overwrrite? y/n: \n"))
if(ans == "y"){
assign(i,eval(parse(text = i)),envir = env)
cat(paste0(i," added to the bucket!\n"))
}
if(ans == "n"){}
if(!ans %in% c("y","n")){
warning("Exitted function - answer me! ")
}
}
}
# Not overwriting, just adding
for(i in arg[!out]){
if(exists(i,envir = .GlobalEnv)){
assign(i,eval(parse(text = i)),envir = env)
cat(paste0(i," added to the bucket!\n"))
}
if(!exists(i,envir = .GlobalEnv)){
cat(paste0("Object ",i," does not exist!\n"))
}
}
}
# Remove items from bucket
if(rmv){
for(i in arg){
if(!all(out)){
cat(paste0(paste0(arg[!out],collapse=", ")," not in the bucket. \n"))
}
if(all(out)){
ans = readline(paste0("Are you sure you want to remove ",i," from the bucket. y/n: "))
if(ans == "y"){
rm(list=i,envir = env)
}
}
}
}
# save(list=ls(envir = .BucketEnv),file=paste0(getwd(),"/",filef),envir = env)
with(env,save.image(paste0(getwd(),"/",filef)))
}
ok = bucket()
ok$unlist.zz2.
bucket = function(...,add = F,env = .BucketEnv,short=T,rmv=F,filef = "bucket.RData"){
# Exit if add=F and empty bucket
if(!add & length(as.list(env))==0 & !rmv){
cat("Empty bucket, nothing to find here.\n")
return(invisible(NULL))
}
# display items if add=F and !empty bucket
if(!add & length(as.list(env))!=0 & length(as.character(as.list(substitute(list(...)))[-1]))==0 & !rmv){
cat("In storage: \n")
if(short){
zz = ls(envir = env)
zz2 = lapply(as.list(env),class)
names(zz2) = NULL
# cat(paste0(zz2,", ",zz,"\n"))
data.frame(unlist(zz2),zz)
return(invisbiel(data.frame(class=unlist(zz2),name = zz)))
}
if(!short){
print(as.list(env))
}
return(invisible(NULL))
}
arg = as.character(as.list(substitute(list(...)))[-1])
# Check for existence
out = arg %in% ls(env)
print("OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOUT")
print(arg)
# -----------------------------------------
# Return from bucket
if(!add & !rmv){
if(!all(out)){
cat(paste0(paste0(arg[!out],collapse=", ")," not in the bucket. \n"))
return(invisible(NULL))
}
if(all(out)){
cat(paste0("Returning ",paste0(arg[out],collapse = ", "),".\n"))
# new ---
for(i in 1:length(out)){
assign(arg[out[i]],as.list(env)[arg[out[i]]],envir = .GlobalEnv)
}
# end new ---
return(as.list(env)[arg[out]])
}
}
# -----------------------------------------
# Add to bucket
if(add & !rmv){
# Overwriting
if(any(out)){
for(i in arg[out]){
ans = readline(paste0(i," already exist in bucket. Overwrrite? y/n: \n"))
if(ans == "y"){
assign(i,eval(parse(text = i)),envir = env)
cat(paste0(i," added to the bucket!\n"))
}
if(ans == "n"){}
if(!ans %in% c("y","n")){
warning("Exitted function - answer me! ")
}
}
}
# Not overwriting, just adding
for(i in arg[!out]){
if(exists(i,envir = .GlobalEnv)){
assign(i,eval(parse(text = i)),envir = env)
cat(paste0(i," added to the bucket!\n"))
}
if(!exists(i,envir = .GlobalEnv)){
cat(paste0("Object ",i," does not exist!\n"))
}
}
}
# Remove items from bucket
if(rmv){
for(i in arg){
if(!all(out)){
cat(paste0(paste0(arg[!out],collapse=", ")," not in the bucket. \n"))
}
if(all(out)){
ans = readline(paste0("Are you sure you want to remove ",i," from the bucket. y/n: "))
if(ans == "y"){
rm(list=i,envir = env)
}
}
}
}
# save(list=ls(envir = .BucketEnv),file=paste0(getwd(),"/",filef),envir = env)
with(env,save.image(paste0(getwd(),"/",filef)))
}
ok = bucket()
bucket = function(...,add = F,env = .BucketEnv,short=T,rmv=F,filef = "bucket.RData"){
# Exit if add=F and empty bucket
if(!add & length(as.list(env))==0 & !rmv){
cat("Empty bucket, nothing to find here.\n")
return(invisible(NULL))
}
# display items if add=F and !empty bucket
if(!add & length(as.list(env))!=0 & length(as.character(as.list(substitute(list(...)))[-1]))==0 & !rmv){
cat("In storage: \n")
if(short){
zz = ls(envir = env)
zz2 = lapply(as.list(env),class)
names(zz2) = NULL
# cat(paste0(zz2,", ",zz,"\n"))
data.frame(unlist(zz2),zz)
return(invisible(data.frame(class=unlist(zz2),name = zz)))
}
if(!short){
print(as.list(env))
}
return(invisible(NULL))
}
arg = as.character(as.list(substitute(list(...)))[-1])
# Check for existence
out = arg %in% ls(env)
print("OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOUT")
print(arg)
# -----------------------------------------
# Return from bucket
if(!add & !rmv){
if(!all(out)){
cat(paste0(paste0(arg[!out],collapse=", ")," not in the bucket. \n"))
return(invisible(NULL))
}
if(all(out)){
cat(paste0("Returning ",paste0(arg[out],collapse = ", "),".\n"))
# new ---
for(i in 1:length(out)){
assign(arg[out[i]],as.list(env)[arg[out[i]]],envir = .GlobalEnv)
}
# end new ---
return(as.list(env)[arg[out]])
}
}
# -----------------------------------------
# Add to bucket
if(add & !rmv){
# Overwriting
if(any(out)){
for(i in arg[out]){
ans = readline(paste0(i," already exist in bucket. Overwrrite? y/n: \n"))
if(ans == "y"){
assign(i,eval(parse(text = i)),envir = env)
cat(paste0(i," added to the bucket!\n"))
}
if(ans == "n"){}
if(!ans %in% c("y","n")){
warning("Exitted function - answer me! ")
}
}
}
# Not overwriting, just adding
for(i in arg[!out]){
if(exists(i,envir = .GlobalEnv)){
assign(i,eval(parse(text = i)),envir = env)
cat(paste0(i," added to the bucket!\n"))
}
if(!exists(i,envir = .GlobalEnv)){
cat(paste0("Object ",i," does not exist!\n"))
}
}
}
# Remove items from bucket
if(rmv){
for(i in arg){
if(!all(out)){
cat(paste0(paste0(arg[!out],collapse=", ")," not in the bucket. \n"))
}
if(all(out)){
ans = readline(paste0("Are you sure you want to remove ",i," from the bucket. y/n: "))
if(ans == "y"){
rm(list=i,envir = env)
}
}
}
}
# save(list=ls(envir = .BucketEnv),file=paste0(getwd(),"/",filef),envir = env)
with(env,save.image(paste0(getwd(),"/",filef)))
}
ok = bucket()
rm(ok)
ok = bucket()
ok$class
ok$name
class(ok)
head(ok)
ok
bucket = function(...,add = F,env = .BucketEnv,short=T,rmv=F,filef = "bucket.RData"){
# Exit if add=F and empty bucket
if(!add & length(as.list(env))==0 & !rmv){
cat("Empty bucket, nothing to find here.\n")
return(invisible(NULL))
}
# display items if add=F and !empty bucket
if(!add & length(as.list(env))!=0 & length(as.character(as.list(substitute(list(...)))[-1]))==0 & !rmv){
cat("In storage: \n")
if(short){
zz = ls(envir = env)
zz2 = lapply(as.list(env),class)
names(zz2) = NULL
print(data.frame(class=unlist(zz2),name = zz))
return(invisible(data.frame(class=unlist(zz2),name = zz)))
}
if(!short){
print(as.list(env))
}
return(invisible(NULL))
}
arg = as.character(as.list(substitute(list(...)))[-1])
# Check for existence
out = arg %in% ls(env)
print("OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOUT")
print(arg)
# -----------------------------------------
# Return from bucket
if(!add & !rmv){
if(!all(out)){
cat(paste0(paste0(arg[!out],collapse=", ")," not in the bucket. \n"))
return(invisible(NULL))
}
if(all(out)){
cat(paste0("Returning ",paste0(arg[out],collapse = ", "),".\n"))
# new ---
for(i in 1:length(out)){
assign(arg[out[i]],as.list(env)[arg[out[i]]],envir = .GlobalEnv)
}
# end new ---
return(as.list(env)[arg[out]])
}
}
# -----------------------------------------
# Add to bucket
if(add & !rmv){
# Overwriting
if(any(out)){
for(i in arg[out]){
ans = readline(paste0(i," already exist in bucket. Overwrrite? y/n: \n"))
if(ans == "y"){
assign(i,eval(parse(text = i)),envir = env)
cat(paste0(i," added to the bucket!\n"))
}
if(ans == "n"){}
if(!ans %in% c("y","n")){
warning("Exitted function - answer me! ")
}
}
}
# Not overwriting, just adding
for(i in arg[!out]){
if(exists(i,envir = .GlobalEnv)){
assign(i,eval(parse(text = i)),envir = env)
cat(paste0(i," added to the bucket!\n"))
}
if(!exists(i,envir = .GlobalEnv)){
cat(paste0("Object ",i," does not exist!\n"))
}
}
}
# Remove items from bucket
if(rmv){
for(i in arg){
if(!all(out)){
cat(paste0(paste0(arg[!out],collapse=", ")," not in the bucket. \n"))
}
if(all(out)){
ans = readline(paste0("Are you sure you want to remove ",i," from the bucket. y/n: "))
if(ans == "y"){
rm(list=i,envir = env)
}
}
}
}
# save(list=ls(envir = .BucketEnv),file=paste0(getwd(),"/",filef),envir = env)
with(env,save.image(paste0(getwd(),"/",filef)))
}
ok = bucket()
# main
cat("\014")
rm(list = ls())
# .pardefault = par()
wd = getwd()
data_file = "all_data.RData"
source("libraries.R")
source("functions.R")
source("data_prep.R")
source("analysis_q8.R")
source("analysis_q10.R")
source("analysis_q19.R")
source("analysis_q20.R")
source("analysis.R")
source("analysis_alt.R")
# record()
# save.image(paste0(getwd(),"/","all_data.RData"))
# save.image(paste0(getwd(),"/bucket.RData"))
# browseURL(paste('file://', file.path(getwd(),'notes.html'), sep=''))
bucket.classes(classes=c("clm","lm","factanal","cfa","data.frame"))
# with(.BucketEnv,save.image(paste0(getwd(),"/bucket.RData")))
save.image(paste0(getwd(),"/","all_data.RData"))
ls(envir = .BucketEnv)
rm(list=ls())
ls(envir = .BucketEnv)
cat("\014")
rm(list = ls())
wd = getwd()
data_file = "all_data.RData"
source("libraries.R")
source("Rfunctions/Rfunctions.R")
source("data_prep.R")
source("analysis_q8.R")
source("analysis_q10.R")
source("analysis_q19.R")
source("analysis_q20.R")
bucket()
?new.env
dir()
"bucket.RData" %in% dir()
?load
# main
cat("\014")
rm(list = ls())
# .pardefault = par()
wd = getwd()
data_file = "all_data.RData"
source("libraries.R")
source("Rfunctions/Rfunctions.R")
source("data_prep.R")
source("analysis_q8.R")
source("analysis_q10.R")
source("analysis_q19.R")
cat("\014")
rm(list = ls())
wd = getwd()
data_file = "all_data.RData"
source("libraries.R")
source("Rfunctions/Rfunctions.R")
.BucketEnv
if("bucket.RData" %in% dir()){
load("bucket.RData",.BucketEnv)
}
if(!"bucket.RData" %in% dir()){
.BucketEnv = new.env()
}s
cat("\014")
rm(list = ls())
wd = getwd()
data_file = "all_data.RData"
source("libraries.R")
source("Rfunctions/Rfunctions.R")
source("data_prep.R")
source("analysis_q8.R")
source("analysis_q10.R")
bucket()
bucket.classes(classes=c("clm","lm","factanal","cfa","data.frame"))
bucket()
